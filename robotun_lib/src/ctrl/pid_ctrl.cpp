/*******************************************************************************
**                                INCLUDES
*******************************************************************************/
#include "ctrl.h"

/*******************************************************************************
**                       INTERNAL MACRO DEFINITIONS
*******************************************************************************/


/*******************************************************************************
**                      COMMON VARIABLE DEFINITIONS
*******************************************************************************/


/*******************************************************************************
**                      INTERNAL VARIABLE DEFINITIONS
*******************************************************************************/


/*******************************************************************************
**                      INTERNAL FUNCTION PROTOTYPES
*******************************************************************************/


/*******************************************************************************
**                          FUNCTION DEFINITIONS
*******************************************************************************/

namespace robotun
{
    namespace ctrl
    {
        pid_ctrl::pid_ctrl(double Kp_, double Ki_, double Kd_, double target_, double last_state_)
        {
            Kp = Kp_;
            Ki = Ki_;
            Kd = Kd_;
            target = target_;
            last_state = last_state_;
            integral_eror = 0;
        }

        pid_ctrl::~pid_ctrl()
        {

        }

        /******************************************************************************/
        /*! @addtogroup Group2
            @brief      

            @param value 
            @param dt 
            @return float 
        ******************************************************************************/
        double pid_ctrl::get_ctrl(double value, double dt)
        {
            double error = target - value;

            double derivative = -(value - last_state) / dt;

            integral_eror += error * dt;
            last_state = value;

            return Kp * error + Ki * integral_eror + Kd * derivative;
        }

        /******************************************************************************/
        /*! @addtogroup Group2
            @brief      
            
            @param target_ 
        ******************************************************************************/
        void pid_ctrl::set_target(double target_)
        {
            target = target_;
        }
    }
}

/******************************** End of file *********************************/

